#https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/adding-controller?view=aspnetcore-6.0&tabs=visual-studio

MVC  -follows DRY principle (You can declaratively specify validation rules in one place (in the model class) and the rules are enforced everywhere in the app.)
    Controller (Retrieve data and decide the response to the browser):
        Every public method in a controller is callable as an HTTP endpoint (Controller methods are referred to as action methods)
            Default URL routing logic /[Controller]/[ActionName]/[Parameters] in Program.cs
        Use HtmlEncoder.Default.Encode to protect the app from malicious input, such as through JavaScript.
        The model binding automatically assign the named parameters from the query string
        to parameters in the method.
    Views:( Should not   Do business logic    Interact with a database directly.) separation of concerns
        Uses Razor pages, you can use anchor Tag Helper attributes .
        Good practice: make folder to separate views.
        View _ViewStart.cshtml sets the layout for all views.
        You can pass data from the controller to the view:
            In a dictionary: ViewData["Key"] = "Value"  --ViewData is a dynamic object (any type can be used)
        In a view with model, the @model statement specifies the type of object that the view expects
    Models: Model names are singular
     A model is made up of entity classes and a context object that represents a session with the database
        Uses POCOs to define the properties of the data to be stored in the database
        Uses EFCore as ORM
        You can use DataAnnotations in model classes
        The context is derived from Microsoft.EntityFrameworkCore.DbContext and specifies the entities to include in the data model.
        Customize model with DataAnnotations: TableName, StringLength , Required, Display, DataType, Range, Column, RegularExpression
            Value types (such as decimal, int, float, DateTime) are inherently required and don't need the [Required] attribute.

    You can install the next tools to scaffold and add SQLServer provider to the project
        Install-Package Microsoft.EntityFrameworkCore.Design
        Install-Package Microsoft.EntityFrameworkCore.SqlServer
        Note: for VSCode see install_mvc_dependencies.sh

    Migrations:
    In package manager console PMC:
        Add-Migration InitialCreate
        Update-Database

    Note:
    When the model class is different than the schema of the Movie table of the existing database. (There's no Rating column in the database table.)

There are a few approaches to resolving the error:

    Have the Entity Framework automatically drop and re-create the database based on the new model class schema. This approach is very convenient early in the development cycle when you're doing active development on a test database; it allows you to quickly evolve the model and database schema together. The downside, though, is that you lose existing data in the database â€” so you don't want to use this approach on a production database! Using an initializer to automatically seed a database with test data is often a productive way to develop an application. This is a good approach for early development and when using SQLite.

    Explicitly modify the schema of the existing database so that it matches the model classes. The advantage of this approach is that you keep your data. You can make this change either manually or by creating a database change script.

    Use Code First Migrations to update the database schema.
                Add-Migration Rating
                Update-Database


