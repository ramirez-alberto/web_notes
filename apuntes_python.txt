Python functions
    type(value) - Check for type bool,int,float,etc
    int(value) - Cast to type
    sys.float_info - check for float specifics (max value for runtime environment,etc)
    len() 


Expression with operator
    24//5 - Divide and round, the symbol // represent integer value

Strings 
    Are immutable, string methods always return new values
    "hola"[0] = "sd" --no se puede
    "Hola"[::2] - stride, show each second char [begin:end exclusive:stride]
    3*"Hola" = "HolaHolaHola"
    print(r"Hola \") - the letter r is for escape char in the string

    Method: string.upper, string.replace(), string.find()
Tuple sorted(Tuple)
Dictionary 
    del(Dict[key]), key in Dict , Dict.keys(), Dict.values()
Set like a list but only hold unique values(remove duplicates). We can cast a list to a set set(List) {}
    set.Add(), set.remove("value"), value in Set
    To get the intersection of two sets use & - set1 & set2 return new set with coincidences
    set1.union(set2) return all elements
    set1,issubset(set2) True or False
 List
    Are mutables
    newList = oldList[:] - copy the list contents into a new list
    list.extend([1,2,3]) - extend the list
    list.append([1,2,3]) - append the list
    list.sort() , string.split(), del(List[index_of_value_to_remove])

Branching:
    if: else: elif:
Conditional: and or not

Loops:
    for i in range(n,n-1), for i in ['a','b','c'], for i,value_in_list in enumerate(list)

Exceptions:
    https://docs.python.org/3/library/exceptions.html?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkPY0101ENSkillsNetwork19487395-2021-01-01
    try ... except or except(ExceptionName): or exception(Name1,Name2,Name3)...
    else (execute something only if there were no errors.) ... 
    finally (always execute)
functions:
    def name(values): or def name(*var_name): pass any arguments, def name(**var): pass args as Dict
        you can 'return value' or 'pass' if function does nothing,
        '''Documentation, this display when call help(miFunction)''' 
    Notes: keyword global myvar to make it global scope available
            mutable objects pass as reference hence you can make changes to the original var

Objects:
    All is a objects, function dir(object) check attr and class methods
    class className(object):
        def _init_(self,var1,var2):
            self.var1 = var1
            self.var2 = var2
        

Conventions:
    Underscore in variable name new_value or newValue

    https://labs.cognitiveclass.ai/tools/jupyterlite/lab/tree/labs/PY0101EN/PY0101EN-1-1-Write_your_first_python_code.ipynb?lti=true