 we need the comments to tell us why it works.
 Code Tells You How, Comments Tell You Why

    Does the code clearly express what it is trying to accomplish?

Naming Things:
 Names for functions and variables should be descriptive. 
Always use camelCase. To keep things consistent and easy to read, variables 
should always begin with a noun or an adjective (that is, a noun phrase) and 
functions with a verb. It is ok to use single characters as variable names in
 the context of a loop or a callback function, but not elsewhere.
Example:
// Good
const numberOfThings = 10;
const myName = "Thor";
const selected = true;

// Bad (these start with verbs, could be confused for functions)
const getCount = 10;
const isSelected = true;

// Good
function getCount() {
  return numberOfThings;
}

// Bad (it's a noun)
function myName() {
  return "Thor";
}


 Principles for clean code:
 https://onextrapixel.com/10-principles-for-keeping-your-programming-code-clean/
1. Revise Your Logic Before Coding
2. Clearly Expose the Structure of the Page
3. Use the Correct Indentation
4.- Write explanatory comments
5. Avoid Abusing Comments
Examples of good comment use are:

    Authoring specifications (e.g. /* Coded by John, November 13th 2010 */).
    Detailed statements on the functionality of a method or procedure 
    (e.g. /* This function validates the login form with the aid of the e-mail check function */).

    Quick notifications or labels that state where a recent change was made 
    (e.g. /* Added e-mail validation procedure */).

6. Avoid Extremely Large Functions
7. Use Naming Standards for Functions and Variables
8. Treat Changes with Caution
9. Avoid Indiscriminate Mixing of Coding Languages
10. Summarize Your Imports

Refactor:

Make a series of small, careful, obviously-correct refactorings that gradually improve the code.
https://stackoverflow.com/questions/51432522/more-elegant-linq-alternative-to-foreach-extension

    Extract complex code to helper methods
    Replace ForEach with real loops
    Eliminate unnecessary ToLists
    Revisit earlier decisions when you realize there's an improvement to be made
    Recognize when you are re-implementing simple helper methods
    Don't stop with one improvement! Each improvement makes it possible to do another.
