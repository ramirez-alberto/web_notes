Private members are visible only in derived classes that are nested in their base class.
Protected members are visible only in derived classes.

Internal members are visible only in derived classes that are located in the same assembly as the base class. They are not visible in derived classes located in a different assembly from the base class.

Public members are visible in derived classes and are part of the derived class' public interface.

Create each new class in a different source file

Inheritance (https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/inheritance)
    Inheritance applies only to classes and interfaces. Other type categories 
            (structs, delegates, and enums) do not support inheritance.
    An is-a relationship based on inheritance is best applied to a base class 
            and to derived classes that add additional members to the base class or that 
            require additional functionality not present in the base class.
    Mark a class as abstract so that it cannot be instantiated.
     An abstract class without any abstract methods indicates that this class 
            represents an abstract concept that is shared among several concrete classes
    You can apply the sealed keyword to indicate that a class cannot serve as a 
            base class for any additional classes. 

    Syntax class DerivedClass : BaseClass
    Constructor for derived class 
        Derived class must explicitly call constructor of base class. You declare a 
        constructor that can pass arguments to the base class constructor.
        The parameters to this new constructor match the parameter type and 
        names of the base class constructor.

        public MyConstructor(type_var name_var) : base(name_var) 

Polymorfism
    In the base class declare a virtual function
        public virtual void MyFunction(){}
    Define the new implementation in the derived class (overriding the base class implementation)
        public override void MyFunction(){}

    For abstract methods the derived class must re-implement the methods
        Note The base class does not provide an implementation for an abstract method
    For virtual methods the derived class may choose re-implement the methods
    Constructor Chaining:
        The this keyword calls the other constructor.
         This technique allows you to have a single implementation for initializing 
         an object even though client code can choose one of many constructors.

        public MyConstructor(string name, decimal initialBalance) : this(name, initialBalance, 0) { }
        public BankAccount(string name, decimal initialBalance, decimal minimumBalance)

        Derived class
        public MyDerivedClassConstructor(string name, decimal initialBalance, decimal creditLimit) : base(name, initialBalance, -creditLimit)
