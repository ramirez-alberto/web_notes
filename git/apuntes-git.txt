The basic Git syntax is program | action | destination.
Best practices: Atomic commits
An atomic commit is a commit that includes changes related to only one feature or task of your program.
 There are two main reasons to do this: first, if something you change turns out to cause some problems,
 it is easy to revert the specific change without losing other changes; and second,
 it enables you to write better commit messages.

If applied, this commit will 

Steps for new repo
    Add README, Add licence (Apache), Add CODE OF CONDUCT (CODE_OF_CONDUCT.md) like "Contributor Covenant", 
        Add contribution guidelines

+ git config
git config --global user.name "Your name"
git config --global user.email "Your email"
git config --global color.ui auto
git config --global init.defaultBranch main

+ Create ssh key with ed25519
ssh-keygen -t ed25519 -C <youremail>

+ Clone a repo
git clone git@github.com:ramirez-alberto/git_test.git

+ Check remote repo
git remote -v

+ View status
git status

+ Add file to staging area
git add file
git add .    //add all files

+ Add a comment to the commit
git commit -m "Add file.txt"
git commit -s --sign a commit
git commit --amend  After add a file to the staging area, replaces the last commit. Use only before push

+View log
git log

+ Push changes
git push //optional git push origin main
git pull origin branch --this command fetch and merge

Revert commit
    git revert commitID

Feature branches
    git branch <branch_name> create a new branch or without arguments to see the branches
    git checkout <branch_name> change to the new branch
    git checkout -b <branch_name> create a new branch and change to it
    - Workflow fetch from main/master to branch:
        git checkout main | git pull main | git checkout branch | git rebase main 
        If git find any conflicts, resolve it and:  git add path/to/file | git rebase --continue

Merge branches:
    git merge <branch_name> 

Delete branch:
    git branch -d <branch_name> if the branch has already been merged into main
    git branch -D <branch_name>   
    git push --delete origin branch-name delete branch from remote repo

Stash
    git stash - save the current progress in the stash. This revert the current state
    of the project to the last commit.
    git stash pop - Retrieve the last save state and remove it.
    git stash apply - Only retrieve the last save state.

Rebase
    git rebase -i Change the history of commits

Update code base
. git remote add upstream github-remote-path
. git checkout main
. git pull upstream main
. git branch -d branch-merged

+Git commit with VSCODE
git config --global core.editor "code --wait".

Create good README's
https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-readmes
https://makeareadme.com/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMCD0131ENSkillsNetwork32121029-2021-01-01
https://github.com/matiassingers/awesome-readme

Useful links for CONTRIBUTING.md
https://github.com/Call-for-Code-for-Racial-Justice/Legit-Info/blob/main/CONTRIBUTING.md
https://github.com/openeew/openeew/blob/master/CONTRIBUTING.md
https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-CD0131EN-SkillsNetwork/labs/project/github.com/atom/atom/blob/master/CONTRIBUTING.md%E2%80%8B
https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-CD0131EN-SkillsNetwork/labs/project/github.com/rails/rails/blob/main/CONTRIBUTING.md%E2%80%8B